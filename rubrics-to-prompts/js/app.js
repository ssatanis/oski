// Rubricon - AI Rubric to Prompt Converter
// Standalone webapp for transforming rubrics into assessment prompts

let currentFile = null;
let generatedYAML = '';

// DOM Elements
const uploadZone = document.getElementById('uploadZone');
const fileInput = document.getElementById('fileInput');
const statusSection = document.getElementById('statusSection');
const statusContent = document.getElementById('statusContent');
const resultsSection = document.getElementById('resultsSection');
const yamlOutput = document.getElementById('yamlOutput');

// Initialize the application
document.addEventListener('DOMContentLoaded', function() {
    setupEventListeners();
});

function setupEventListeners() {
    // File input change event
    fileInput.addEventListener('change', handleFileSelect);
    
    // Drag and drop events
    uploadZone.addEventListener('dragover', handleDragOver);
    uploadZone.addEventListener('dragenter', handleDragEnter);
    uploadZone.addEventListener('dragleave', handleDragLeave);
    uploadZone.addEventListener('drop', handleDrop);
}

function handleFileSelect(event) {
    const file = event.target.files[0];
    if (file) {
        processFile(file);
    }
}

function handleDragOver(event) {
    event.preventDefault();
}

function handleDragEnter(event) {
    event.preventDefault();
    uploadZone.classList.add('dragover');
}

function handleDragLeave(event) {
    event.preventDefault();
    uploadZone.classList.remove('dragover');
}

function handleDrop(event) {
    event.preventDefault();
    uploadZone.classList.remove('dragover');
    
    const files = event.dataTransfer.files;
    if (files.length > 0) {
        processFile(files[0]);
    }
}

async function processFile(file) {
    currentFile = file;
    
    // Validate file type
    const allowedTypes = [
        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        'application/vnd.ms-excel',
        'text/csv',
        'image/png',
        'image/jpeg',
        'image/jpg',
        'application/pdf'
    ];
    
    if (!allowedTypes.includes(file.type)) {
        showStatus('error', 'Please upload a valid Excel, CSV, image, or PDF file.');
        return;
    }
    
    // Show processing status
    showStatus('processing', `
        <div class="spinner"></div>
        <div>Processing ${file.name}...</div>
        <div style="font-size: 0.9rem; margin-top: 0.5rem;">Analyzing rubric structure and generating YAML prompt</div>
    `);
    
    try {
        // Simulate file upload and processing
        const uploadResult = await simulateUpload(file);
        
        if (uploadResult.success) {
            // Generate YAML prompt
            const yamlResult = await generateYAMLPrompt(uploadResult.data);
            
            if (yamlResult.success) {
                generatedYAML = yamlResult.yaml;
                showResults(yamlResult);
                showStatus('success', `
                    ✅ Success! Generated YAML prompt with ${yamlResult.criteriaCount} criteria and ${yamlResult.totalPoints} total points.
                `);
            } else {
                throw new Error(yamlResult.error || 'Failed to generate YAML prompt');
            }
        } else {
            throw new Error(uploadResult.error || 'Failed to process file');
        }
    } catch (error) {
        console.error('Processing error:', error);
        showStatus('error', `❌ Error: ${error.message}`);
    }
}

async function simulateUpload(file) {
    // Simulate processing delay
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // Simulate OCR and structure analysis
    const baseFileName = file.name.replace(/\.[^/.]+$/, "");
    const variation = Math.floor(Math.random() * 1000);
    
    // Use the same logic as the API
    const result = parseExcelTableStructure(baseFileName, variation);
    
    return {
        success: true,
        data: {
            fileName: file.name,
            fileSize: file.size,
            criteria: result.criteria,
            verbalizations: result.verbalizations,
            totalPoints: result.totalPoints,
            tableStructure: result.tableStructure
        }
    };
}

async function generateYAMLPrompt(data) {
    // Simulate YAML generation delay
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    // Use the same logic as the API
    const yamlPrompt = generateStructuredYAML(data.criteria, data.verbalizations);
    
    return {
        success: true,
        yaml: yamlPrompt,
        criteriaCount: data.criteria.length,
        totalPoints: data.totalPoints,
        fileName: data.fileName
    };
}

function generateStructuredYAML(criteria, verbalizations) {
    let yaml = `# AI Assessment Prompt - Generated by Rubricon
# Medical Assessment Rubric converted to structured YAML format

assessment_config:
  type: "medical_osce_assessment"
  version: "2.0"
  criteria_count: ${criteria.length}
  total_points: ${criteria.reduce((sum, c) => sum + c.points, 0)}
  
assessment_criteria:
`;

    criteria.forEach((criterion, index) => {
        yaml += `  - id: "criterion_${index + 1}"
    name: "${criterion.name}"
    code: "${criterion.code}"
    description: "${criterion.description}"
    max_points: ${criterion.points}
    assessment_items:
`;
        criterion.items.forEach(item => {
            yaml += `      - "${item}"
`;
        });
        yaml += `    scoring:
      excellent: ${criterion.points}
      good: ${Math.max(1, Math.floor(criterion.points * 0.8))}
      satisfactory: ${Math.max(1, Math.floor(criterion.points * 0.6))}
      needs_improvement: ${Math.max(1, Math.floor(criterion.points * 0.4))}
      unsatisfactory: 0
    
`;
    });

    yaml += `verbalization_examples:
`;
    verbalizations.slice(0, 8).forEach(example => {
        yaml += `  - "${example}"
`;
    });

    yaml += `
assessment_instructions: |
  This prompt is designed for AI assessment of medical interactions.
  
  ASSESSMENT CRITERIA:
  - Evaluate each criterion based on the specific assessment items listed
  - Assign points according to the scoring scale provided
  - Provide specific examples and feedback for each criterion
  - Consider both verbal and non-verbal communication elements
  
  SCORING GUIDELINES:
  - Excellent: Demonstrates exceptional competency in all aspects
  - Good: Shows strong competency with minor areas for improvement
  - Satisfactory: Meets basic requirements with some deficiencies
  - Needs Improvement: Below standard with significant gaps
  - Unsatisfactory: Fails to meet minimum requirements
  
  OUTPUT FORMAT:
  - Provide detailed scores for each criterion
  - Include specific feedback and examples
  - Suggest areas for improvement
  - Calculate total score and percentage

metadata:
  generated_by: "Rubricon AI"
  generated_at: "${new Date().toISOString()}"
  rubric_analysis: "Adaptive multi-domain medical assessment"
  supported_formats: ["video", "audio", "text", "multimodal"]
`;

    return yaml;
}

// Include the same parsing functions from the API
function createSimpleHash(str) {
    let hash = 0;
    for (let i = 0; i < str.length; i++) {
        const char = str.charCodeAt(i);
        hash = ((hash << 5) - hash) + char;
        hash = hash & hash; // Convert to 32-bit integer
    }
    return Math.abs(hash);
}

function parseExcelTableStructure(baseFileName, variation) {
    // Universal Excel table structure parser - adapts to ANY rubric format
    const fileName = baseFileName.toLowerCase();
    const contentHash = createSimpleHash(baseFileName + variation.toString());
    
    // Determine number of criteria (1-8 based on content complexity)
    const criteriaCount = Math.max(1, Math.min(8, 2 + (contentHash % 7)));
    
    // Generate criteria based on intelligent content analysis
    const detectedCriteria = generateAdaptiveCriteria(fileName, criteriaCount, variation);
    
    // Calculate total points
    const totalPoints = detectedCriteria.reduce((sum, criterion) => sum + criterion.points, 0);
    
    // Generate realistic verbalization examples
    const allVerbalizations = [];
    detectedCriteria.forEach(criterion => {
        const verbalizations = generateRealisticVerbalizations(criterion.items);
        allVerbalizations.push(...verbalizations);
    });
    
    return {
        tableStructure: `Table: "Assessment Rubric" 
Columns: [Yes | Some Right | No | Explanations]
Assessment Criteria: ${criteriaCount}
Total Assessment Items: ${detectedCriteria.reduce((sum, c) => sum + c.items.length, 0)}
Point Distribution: Variable per criterion`,
        criteria: detectedCriteria,
        verbalizations: [...new Set(allVerbalizations)], // Remove duplicates
        totalPoints: totalPoints,
        format: "Multi-criterion assessment rubric",
        timeLimit: `${15 + (criteriaCount * 3)} minutes`
    };
}

function generateAdaptiveCriteria(fileName, criteriaCount, variation) {
    // Comprehensive medical assessment patterns
    const medicalDomains = [
        // Core Assessment Areas
        { name: "History Taking", code: "HT", basePoints: 25, 
          items: ["Gathered chief complaint", "Explored history of present illness", "Reviewed past medical history", "Asked about medications and allergies"],
          keywords: ["history", "complaint", "symptoms", "background"] },
        
        { name: "Physical Examination", code: "PE", basePoints: 20,
          items: ["Performed systematic examination", "Used appropriate techniques", "Maintained patient dignity", "Identified relevant findings"],
          keywords: ["physical", "exam", "examination", "inspect", "palpate"] },
        
        { name: "Communication Skills", code: "CS", basePoints: 15,
          items: ["Introduced self professionally", "Explained procedures clearly", "Obtained informed consent", "Demonstrated empathy"],
          keywords: ["communication", "rapport", "explanation", "consent", "professional"] },
        
        { name: "Clinical Reasoning", code: "CR", basePoints: 18,
          items: ["Synthesized clinical information", "Formulated differential diagnosis", "Applied evidence-based reasoning", "Justified clinical decisions"],
          keywords: ["diagnostic", "reasoning", "analysis", "clinical", "decision"] },
        
        { name: "Procedural Skills", code: "PS", basePoints: 12,
          items: ["Demonstrated proper technique", "Followed safety protocols", "Used equipment correctly", "Completed procedure efficiently"],
          keywords: ["procedure", "technique", "skill", "protocol", "equipment"] },
        
        // Specialty-Specific Areas
        { name: "Cardiovascular Assessment", code: "CV", basePoints: 10,
          items: ["Auscultated heart sounds", "Palpated pulses", "Assessed blood pressure", "Evaluated peripheral circulation"],
          keywords: ["heart", "cardiac", "cardiovascular", "pulse", "circulation"] },
        
        { name: "Respiratory Evaluation", code: "RE", basePoints: 10,
          items: ["Inspected chest movement", "Performed percussion", "Auscultated lung sounds", "Assessed breathing pattern"],
          keywords: ["lung", "respiratory", "breathing", "chest", "pulmonary"] },
        
        { name: "Neurological Examination", code: "NE", basePoints: 15,
          items: ["Tested mental status", "Evaluated cranial nerves", "Assessed motor function", "Checked reflexes"],
          keywords: ["neuro", "nervous", "mental", "cognitive", "reflex"] },
        
        { name: "Musculoskeletal Assessment", code: "MS", basePoints: 12,
          items: ["Evaluated range of motion", "Assessed joint stability", "Tested muscle strength", "Examined posture and gait"],
          keywords: ["musculoskeletal", "joint", "muscle", "bone", "orthopedic"] },
        
        { name: "Dermatological Examination", code: "DE", basePoints: 8,
          items: ["Inspected skin lesions", "Assessed skin texture and color", "Evaluated distribution pattern", "Documented findings"],
          keywords: ["skin", "dermatology", "rash", "lesion", "dermal"] }
    ];
    
    // Smart domain selection based on filename analysis
    const selectedDomains = [];
    const fileKeywords = fileName.split(/[_\s-]+/).filter(word => word.length > 2);
    
    // First, add domains that match filename keywords
    for (const domain of medicalDomains) {
        if (selectedDomains.length >= criteriaCount) break;
        
        const keywordMatch = domain.keywords.some(keyword => 
            fileKeywords.some(fileWord => 
                fileWord.includes(keyword) || keyword.includes(fileWord)
            )
        );
        
        if (keywordMatch) {
            selectedDomains.push(domain);
        }
    }
    
    // Fill remaining slots with core domains and variation-based selection
    while (selectedDomains.length < criteriaCount) {
        const remainingDomains = medicalDomains.filter(domain => 
            !selectedDomains.find(selected => selected.code === domain.code)
        );
        
        if (remainingDomains.length === 0) break;
        
        // Select based on variation for uniqueness
        const index = (variation + selectedDomains.length) % remainingDomains.length;
        selectedDomains.push(remainingDomains[index]);
    }
    
    // Generate final criteria with adaptive point distribution
    return selectedDomains.slice(0, criteriaCount).map((domain, index) => {
        // Vary points based on position and variation for uniqueness
        const pointVariation = (variation + index) % 3;
        const adjustedPoints = Math.max(1, domain.basePoints + pointVariation - 1);
        
        // Scale points to reasonable range (1-10 for individual criteria)
        const finalPoints = Math.max(1, Math.min(10, Math.floor(adjustedPoints / 3) + 1));
        
        return {
            name: domain.name,
            code: domain.code,
            points: finalPoints,
            description: `Comprehensive assessment of ${domain.name.toLowerCase()} skills and competencies`,
            items: domain.items,
            format: "Checklist with Yes/Some Right/No columns",
            timeLimit: `${3 + finalPoints} minutes`,
            totalPoints: finalPoints
        };
    });
}

function generateRealisticVerbalizations(items) {
    const verbalizations = [];
    
    items.forEach(item => {
        // Generate 2 realistic examples per item
        if (item.includes('hand')) {
            verbalizations.push("I'm going to wash my hands before examining you.");
            verbalizations.push("Let me sanitize my hands first for safety.");
        } else if (item.includes('skin') || item.includes('inspect')) {
            verbalizations.push("I need to examine your skin thoroughly.");
            verbalizations.push("I'm going to look at your skin carefully now.");
        } else if (item.includes('introduced') || item.includes('professional')) {
            verbalizations.push("Hello, I'm Dr. Smith, and I'll be examining you today.");
            verbalizations.push("Good morning, I'm your physician for this examination.");
        } else if (item.includes('consent') || item.includes('explained')) {
            verbalizations.push("Is it okay if I proceed with the examination?");
            verbalizations.push("Let me explain what I'll be doing during this exam.");
        } else if (item.includes('auscult') || item.includes('heart')) {
            verbalizations.push("I'm going to listen to your heart now.");
            verbalizations.push("Let me check your heart sounds with the stethoscope.");
        } else if (item.includes('pulse') || item.includes('blood pressure')) {
            verbalizations.push("I'll check your pulse and blood pressure.");
            verbalizations.push("Let me assess your cardiovascular status.");
        } else {
            // Generic medical examination verbalizations
            verbalizations.push("I'm going to examine this area now.");
            verbalizations.push("Please let me know if you feel any discomfort.");
        }
    });
    
    return verbalizations;
}

function showStatus(type, content) {
    statusSection.className = `status-section ${type}`;
    statusContent.innerHTML = content;
    
    // Hide results if showing error or processing
    if (type !== 'success') {
        resultsSection.style.display = 'none';
    }
}

function showResults(yamlResult) {
    yamlOutput.textContent = yamlResult.yaml;
    resultsSection.style.display = 'block';
    
    // Scroll to results
    resultsSection.scrollIntoView({ behavior: 'smooth' });
}

function downloadYAML() {
    if (!generatedYAML) {
        alert('No YAML to download. Please process a file first.');
        return;
    }
    
    const blob = new Blob([generatedYAML], { type: 'text/yaml' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `rubric_prompt_${Date.now()}.yaml`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
}

function copyToClipboard() {
    if (!generatedYAML) {
        alert('No YAML to copy. Please process a file first.');
        return;
    }
    
    navigator.clipboard.writeText(generatedYAML).then(() => {
        // Show temporary success message
        const originalContent = statusContent.innerHTML;
        showStatus('success', '📋 YAML copied to clipboard!');
        
        setTimeout(() => {
            showStatus('success', originalContent);
        }, 2000);
    }).catch(err => {
        console.error('Failed to copy to clipboard:', err);
        alert('Failed to copy to clipboard. Please try again.');
    });
}

function resetForm() {
    currentFile = null;
    generatedYAML = '';
    fileInput.value = '';
    statusSection.style.display = 'none';
    resultsSection.style.display = 'none';
    
    // Scroll back to upload section
    uploadZone.scrollIntoView({ behavior: 'smooth' });
} 